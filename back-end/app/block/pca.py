from anndata import AnnData
from block.block_interface import Block
import codecs
import io
from joblib import parallel_backend
from matplotlib import pyplot as plt
import scanpy as sc
from threadpoolctl import threadpool_limits


class PCA(Block):

    required_parameters = []

    def __init__(self):
        super().__init__()

    def validate_parameters(self, parameters: dict) -> None:
        super(PCA, self).validate_parameters(parameters)

    def run(self, adata: AnnData, parameters: dict) -> (AnnData, dict):
        self.validate_parameters(parameters)

        adata.var["mt"] = adata.var_names.str.startswith("MT-")
        sc.pp.calculate_qc_metrics(adata, qc_vars=["mt"], percent_top=None, log1p=False, inplace=True)
        adata.obs["total_UMIs"] = adata.obs["total_counts"]
        adata.obs = adata.obs.drop("total_counts", axis=1)

        # Consider adding Regress Out PCA step (see Trello)
        # sc.pp.regress_out(adata, ["total_UMIs", "pct_counts_mt"], n_jobs=1)

        with parallel_backend("threading", n_jobs=1):
            with threadpool_limits(limits=1, user_api="blas"):
                sc.pp.scale(adata, max_value=10)
                sc.tl.pca(adata, svd_solver="arpack")
        sc.pl.pca_variance_ratio(adata, log=True)
        plt.ylabel("log variance ratio")

        image_stream = io.BytesIO()
        plt.savefig(image_stream, format="png")
        image_stream.seek(0)
        message = {
            "img": str(codecs.encode(image_stream.read(), "base64")),
            "alttext": "A scatter plot displaying the contribution of each PC to the total variance in the data, generated by a Principal Component Analysis block"
        }
        return adata, message
