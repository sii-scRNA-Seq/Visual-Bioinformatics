from anndata import AnnData
from block.block_interface import Block
import codecs
import io
from matplotlib import pyplot as plt
import scanpy as sc


class QCPlots(Block):

    required_parameters = []

    def __init__(self):
        super().__init__()

    def validate_parameters(self, parameters: dict) -> None:
        super(QCPlots, self).validate_parameters(parameters)

    def run(self, adata: AnnData, dataset: str, parameters: dict) -> (AnnData, dict):
        self.validate_parameters(parameters)

        if dataset == "pbmc3k":
            adata.var["mt"] = adata.var_names.str.startswith("MT-")
            adata.obs["sample"] = adata.obs["sample"]
        elif dataset == "pf_dogga":
            adata.var["mt"] = adata.var_names.str.contains("MIT")
            adata.obs["sample"] = adata.obs["day"]
        else:
            raise Exception("Selected dataset does not exist.")

        sc.pp.calculate_qc_metrics(adata, qc_vars=["mt"], percent_top=None, log1p=False, inplace=True)
        adata.obs["total_UMIs"] = adata.obs["total_counts"]
        adata.obs = adata.obs.drop("total_counts", axis=1)

        plt.rcParams["figure.figsize"] = (12, 5)
        plt.rcParams["font.size"] = 18
        image_list = []
        for observation in ["n_genes_by_counts", "total_UMIs", "pct_counts_mt"]:
            sc.pl.violin(adata, observation, groupby="sample", jitter=0.4, multi_panel=True, show=False)
            plt.title(observation)
            plt.ylabel("")
            image_stream = io.BytesIO()
            plt.savefig(image_stream, format="png")
            image_stream.seek(0)
            image_list.append({
                "image": str(codecs.encode(image_stream.read(), "base64")),
                "alt_text": "A violin plot displaying the distribution of the " + observation + " observation generated by a QC Plots block"
            })
        plt.rcdefaults()

        message = {
            "image_list": image_list
        }
        return adata, message
