from anndata import AnnData
from block.block_interface import Block
import codecs
import io
from matplotlib import pyplot as plt
import scanpy as sc


class QCPlots(Block):

    """
    `QCPlots` subclass, which inherits from the `Block` superclass.
    """

    required_parameters = []
    """The parameters required by a `QCPlots` block."""

    def __init__(self):
        """Initialise a `QCPlots` object."""
        super().__init__()

    def validate_parameters(self, parameters: dict) -> None:
        """
        Validates that all of the parameters in the `required_parameters` attribute are present in the parameters dictionary. The implementation is inherited from the `Block` superclass.

        Parameters:

            - `parameters`: A dictionary mapping block parameters to their values.
        """
        super(QCPlots, self).validate_parameters(parameters)

    def run(self, adata: AnnData, dataset: str, parameters: dict) -> (AnnData, dict):
        """
        Execute the code for a `QCPlots` block.

        Calculates the QC metrics, then creates 3 violin plots (one for each metric), with cells grouped by sample.

        Parameters:

            - `adata`: The AnnData for which the code should be executed.
            - `dataset`: The user's selected dataset.
            - `parameters`: A dictionary mapping parameter names to their values, which should be used while executing the code.

        Return:

            - The resulting AnnData after performing the block's behaviour.
            - A dictionary containing the results that will be seen by the user.
        """
        self.validate_parameters(parameters)

        if dataset == "pbmc3k":
            adata.var["mt"] = adata.var_names.str.startswith("MT-")
            adata.obs["sample"] = adata.obs["sample"]
        elif dataset == "pf_dogga":
            adata.var["mt"] = adata.var_names.str.contains("MIT")
            adata.obs["sample"] = adata.obs["day"]
        else:
            raise Exception("Selected dataset does not exist.")

        sc.pp.calculate_qc_metrics(adata, qc_vars=["mt"], percent_top=None, log1p=False, inplace=True)
        adata.obs["total_UMIs"] = adata.obs["total_counts"]
        adata.obs = adata.obs.drop("total_counts", axis=1)

        plt.rcParams["figure.figsize"] = (12, 5)
        plt.rcParams["font.size"] = 18
        image_list = []
        for observation in ["n_genes_by_counts", "total_UMIs", "pct_counts_mt"]:
            sc.pl.violin(adata, observation, groupby="sample", jitter=0.4, multi_panel=True, show=False)
            plt.title(observation)
            plt.ylabel("")
            image_stream = io.BytesIO()
            plt.savefig(image_stream, format="png")
            image_stream.seek(0)
            image_list.append({
                "image": str(codecs.encode(image_stream.read(), "base64")),
                "alt_text": "A violin plot displaying the distribution of the " + observation + " observation generated by a QC Plots block"
            })
        plt.rcdefaults()

        message = {
            "image_list": image_list
        }
        return adata, message
