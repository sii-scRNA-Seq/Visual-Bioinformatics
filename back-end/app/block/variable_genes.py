from anndata import AnnData
from block.block_interface import Block
import codecs
import io
from matplotlib import pyplot as plt
import scanpy as sc


class VariableGenes(Block):

    """
    `VariableGenes` subclass, which inherits from the `Block` superclass.
    """

    required_parameters = ["min_mean", "max_mean", "min_disp"]
    """The parameters required by a `VariableGenes` block."""

    def __init__(self):
        """Initialise a `VariableGenes` object."""
        super().__init__()

    def validate_parameters(self, parameters: dict) -> None:
        """
        Validate that all of the parameters in the `required_parameters` attribute are present in the parameters dictionary. The implementation is inherited from the `Block` superclass.

        Parameters:

            - `parameters`: A dictionary mapping block parameters to their values.
        """
        super(VariableGenes, self).validate_parameters(parameters)

    def run(self, adata: AnnData, dataset: str, parameters: dict) -> (AnnData, dict):
        """
        Execute the code for a `VariableGenes` block.

        Extract the values for `min_mean`, `max_mean` and `min_disp` from the `parameters` dictionary, normalise and logarithmise the data, then calculate and plot highly variable genes.

        Parameters:

            - `adata`: The AnnData for which the code should be executed.
            - `dataset`: The user's selected dataset.
            - `parameters`: A dictionary mapping parameter names to their values, which should be used while executing the code.

        Return:

            - The resulting AnnData after performing the block's behaviour.
            - A dictionary containing the results that will be seen by the user.
        """
        self.validate_parameters(parameters)

        min_mean = float(parameters["min_mean"])
        max_mean = float(parameters["max_mean"])
        min_disp = float(parameters["min_disp"])

        sc.pp.normalize_total(adata, target_sum=1e4)
        sc.pp.log1p(adata)
        sc.pp.highly_variable_genes(adata, min_mean=min_mean, max_mean=max_mean, min_disp=min_disp)
        plt.rcParams["font.size"] = 14
        sc.pl.highly_variable_genes(adata, show = False)
        plt.rcdefaults()

        image_stream = io.BytesIO()
        plt.savefig(image_stream, format="png")
        image_stream.seek(0)
        image = {
            "image": str(codecs.encode(image_stream.read(), "base64")),
            "alt_text": "A scatter plot displaying dispersions of genes generated by an Identify Highly Variable Genes block"
        }
        message = {
            "image": image
        }
        return adata, message
