from anndata import AnnData
from block.block_interface import Block
import codecs
import io
from matplotlib import pyplot as plt
import scanpy as sc


class VariableGenes(Block):

    required_parameters = ["min_mean", "max_mean", "min_disp"]

    def __init__(self):
        super().__init__()

    def validate_parameters(self, parameters: dict) -> None:
        super(VariableGenes, self).validate_parameters(parameters)

    def run(self, adata: AnnData, parameters: dict) -> (AnnData, dict):
        self.validate_parameters(parameters)

        min_mean = float(parameters["min_mean"])
        max_mean = float(parameters["max_mean"])
        min_disp = float(parameters["min_disp"])

        sc.pp.normalize_total(adata, target_sum=1e4)
        sc.pp.log1p(adata)
        sc.pp.highly_variable_genes(adata, min_mean=min_mean, max_mean=max_mean, min_disp=min_disp)
        plt.rcParams["font.size"] = 14
        sc.pl.highly_variable_genes(adata)

        image_stream = io.BytesIO()
        plt.savefig(image_stream, format="png")
        image_stream.seek(0)
        message = {
            "img": str(codecs.encode(image_stream.read(), "base64")),
            "alttext": "A scatter plot displaying dispersions of genes generated by an Identify Highly Variable Genes block"
        }
        return adata, message
